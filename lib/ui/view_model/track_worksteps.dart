import 'package:dibano/data/model/workstepActivity_model.dart';
import 'package:dibano/data/model/workstep_model.dart';
import 'package:flutter/widgets.dart';

class TrackWorkstepsViewModel extends ChangeNotifier {
  Future<void> addWorkstepActivity(
    int cropDateId,
    String? description,
    int? personId,
    int? activityId,
    DateTime activityDate,
    double? quantityPerField,
    double? quantityPerHa,
    double? nPerField,
    double? nPerHa,
    double? pPerField,
    double? pPerHa,
    double? kPerField,
    double? kPerHa,
    String? tractor,
    String? fertilizerSpreader,
    double? seedingDepth,
    double? seedingQuantity,
    String? plantProtectionName,
    double? rowDistance,
    double? seedingDistance,
    String? germinationAbility,
    double? goalQuantity,
    String? spray,
    double? machiningDepth,
    String? usedMachine,
    String? productName,
    String? plantProtectionType,
    double? actualQuantity,
    double? waterQuantityProcentage,
    String? groundDamage,
    String? pest,
    String? fungal,
    String? problemWeeds,
    String? nutrient,
    double? countPerPlant,
    double? plantPerQm,
    int? fertilizerId,
    bool? turning,
    bool? ptoDriven,
  ) async {
    Workstep workstep = Workstep(
      description: description,
      personId: personId,
      cropdateId: cropDateId,
      date: activityDate.toIso8601String(),
      quantityPerField: quantityPerField,
      quantityPerHa: quantityPerHa,
      nPerField: nPerField,
      nPerHa: nPerHa,
      pPerField: pPerField,
      pPerHa: pPerHa,
      kPerField: kPerField,
      kPerHa: kPerHa,
      tractor: tractor,
      fertilizerSpreader: fertilizerSpreader,
      seedingDepth: seedingDepth,
      seedingQuantity: seedingQuantity,
      plantProtectionName: plantProtectionName,
      rowDistance: rowDistance,
      seedingDistance: seedingDistance,
      germinationAbility: germinationAbility,
      goalQuantity: goalQuantity,
      spray: spray,
      machiningDepth: machiningDepth,
      usedMachine: usedMachine,
      productName: productName,
      plantProtectionType: plantProtectionType,
      actualQuantity: actualQuantity,
      waterQuantityProcentage: waterQuantityProcentage,
      groundDamage: groundDamage,
      pest: pest,
      fungal: fungal,
      problemWeeds: problemWeeds,
      nutrient: nutrient,
      countPerPlant: countPerPlant,
      plantPerQm: plantPerQm,
      fertilizerId: fertilizerId,
      turning: turning==true ? 1 : 0,
      ptoDriven: ptoDriven==true ? 1 : 0,
    );
    int workstepId = await workstep.insertReturnId();

    WorkstepActivity workstepActivity = WorkstepActivity(
      workstepId: workstepId,
      activityId: activityId,
    );
    workstepActivity.insert();
    notifyListeners();
  }

  Future<void> updateWorkStepActivity(
    int cropDateId,
    String? description,
    int? personId,
    int? activityId,
    int? workstepActivityId,
    int workstepId,
    DateTime activityDate,
    double? quantityPerField,
    double? quantityPerHa,
    double? nPerField,
    double? nPerHa,
    double? pPerField,
    double? pPerHa,
    double? kPerField,
    double? kPerHa,
    String? tractor,
    String? fertilizerSpreader,
    double? seedingDepth,
    double? seedingQuantity,
    String? plantProtectionName,
    double? rowDistance,
    double? seedingDistance,
    String? germinationAbility,
    double? goalQuantity,
    String? spray,
    double? machiningDepth,
    String? usedMachine,
    String? productName,
    String? plantProtectionType,
    double? actualQuantity,
    double? waterQuantityProcentage,
    String? groundDamage,
    String? pest,
    String? fungal,
    String? problemWeeds,
    String? nutrient,
    double? countPerPlant,
    double? plantPerQm,
    int? fertilizerId,
    bool? turning,
    bool? ptoDriven,
  ) async {
    Workstep workstep = Workstep(
      id: workstepId,
      description: description,
      personId: personId,
      cropdateId: cropDateId,
      date: activityDate.toIso8601String(),
      quantityPerField: quantityPerField,
      quantityPerHa: quantityPerHa,
      nPerField: nPerField,
      nPerHa: nPerHa,
      pPerField: pPerField,
      pPerHa: pPerHa,
      kPerField: kPerField,
      kPerHa: kPerHa,
      tractor:tractor,
      fertilizerSpreader: fertilizerSpreader,
      seedingDepth: seedingDepth,
      seedingQuantity: seedingQuantity,
      plantProtectionName: plantProtectionName,
      rowDistance: rowDistance,
      seedingDistance: seedingDistance,
      germinationAbility: germinationAbility,
      goalQuantity: goalQuantity,
      spray: spray,
      machiningDepth: machiningDepth,
      usedMachine: usedMachine,
      productName: productName,
      plantProtectionType: plantProtectionType,
      actualQuantity: actualQuantity,
      waterQuantityProcentage: waterQuantityProcentage,
      groundDamage: groundDamage,
      pest: pest,
      fungal: fungal,
      problemWeeds: problemWeeds,
      nutrient: nutrient,
      countPerPlant: countPerPlant,
      plantPerQm: plantPerQm,
      fertilizerId: fertilizerId,
      turning: turning==true ? 1 : 0,
      ptoDriven: ptoDriven==true ? 1 : 0,
    );
    await workstep.update();

    WorkstepActivity workstepActivity = WorkstepActivity(
      id: workstepActivityId,
      workstepId: workstepId,
      activityId: activityId,
    );
    workstepActivity.update();
    notifyListeners();
  }
}
